const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const https = require('https');

const app = express();
app.use(bodyParser.json());
var cors = require('cors');

var allowedOrigins = ['http://localhost:3002'];
app.use(cors({
  origin: function(origin, callback){
    // allow requests with no origin 
    // (like mobile apps or curl requests)
    if(!origin) return callback(null, true);
    if(allowedOrigins.indexOf(origin) === -1){
      var msg = 'The CORS policy for this site does not ' +
                'allow access from the specified Origin.';
      return callback(new Error(msg), false);
    }
    return callback(null, true);
  }
}));

const agent = new https.Agent({ 
  rejectUnauthorized: false
});
                     
DKUBE_URL=`https://192.168.200.102:32222/`
DKUBE_TOKEN=`eyJhbGciOiJSUzI1NiIsImtpZCI6Ijc0YmNkZjBmZWJmNDRiOGRhZGQxZWIyOGM2MjhkYWYxIn0.eyJ1c2VybmFtZSI6Im9jZGt1YmUxNCIsInJvbGUiOiJkYXRhc2NpZW50aXN0LG1sZSxwZSIsImRlcGxveSI6ZmFsc2UsImV4cCI6NDkxMjY0MzIzMCwiaWF0IjoxNjcyNjQzMjMwLCJpc3MiOiJEa3ViZSJ9.nGvOUfHBZkbYNf_Vme5wdDiyAcC4MqupHLJ6soJE8JHEfXBiPyGj_YwOx56kqg7gsm4dtSJGCY7j-rcK8ZTJM7mHDf7mYjfvmMcAxSaThGNAA0r1RVMze9IKOaWlIiB8UZy-LyoZMRw9t2fc3AhapjTfVdHxwKXVJQ4TxOpi37bceys3T7FnaHDgIRFa1f7J9cFV24nny2UiLkgZUSFKrKdtGKmv0HKaR_NPP_520T3YkEO5bZ5_Wh4CVf73abB5Z5yQcmw6EmheuXBRlOjz7qgW2gMvDHdl1UVsjnJGOfElnqPrHmaoDRtaSZOfEiZbPvm69g49faFhRqIdk5aacw`
app.post('/predict', async (req, res) => {
  try {
    const payload = req.body;
    console.log(req.body)
    const response = await axios.post(DKUBE_URL, payload, { headers: { authorization: `Bearer ${DKUBE_TOKEN}` }, httpsAgent: agent, validateStatus: () => true });
    if (response.status === 200) {
      res.header( "Access-Control-Allow-Origin" );
      res.send({ prediction: response.data.result });
      console.log("success")
    } else {
      res.status(response.status).send({ error: response.statusText });
      console.log("error")
    }
  } catch (error) {
    console.error(error);
    res.status(500).send({ error: 'Internal server error' });
  }
});

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
